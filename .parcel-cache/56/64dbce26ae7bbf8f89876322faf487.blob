"use strict";

require("core-js/modules/web.immediate.js");
var model = _interopRequireWildcard(require("./model.js"));
var _recipeView = _interopRequireDefault(require("./view/recipeView.js"));
var _searchView = _interopRequireDefault(require("./view/searchView.js"));
var _resultsView = _interopRequireDefault(require("./view/resultsView.js"));
var _paginationView = _interopRequireDefault(require("./view/paginationView.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
// NEW API URL (instead of the one shown in the video)
// https://forkify-api.jonas.io

///////////////////////////////////////

if (module.hot) {
  module.hot.accept();
}
const controlRecipes = async function () {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;
    _recipeView.default.renderSpinner();
    await model.loadRecipe(id);
    _recipeView.default.render(model.state.recipe);
    controlServings(model.state.recipe.servings);
  } catch (err) {
    _recipeView.default.renderError();
  }
};
const controlSearchResult = async function () {
  try {
    _resultsView.default.renderSpinner();
    const query = _searchView.default.getQuery();
    if (!query) return;
    await model.loadSearchResult(query);
    _resultsView.default.render(model.getSearchResultsPage());
    _paginationView.default.render(model.state.search);
  } catch (err) {
    throw err;
  }
};
const controlPagination = async function (goToPage) {
  _resultsView.default.render(model.getSearchResultsPage(goToPage));
  _paginationView.default.render(model.state.search);
};
const controlServings = function (newServing) {
  // update the recipe serving (in state)
  model.updateServings(newServing);

  // update the recipe view
  _recipeView.default.render(model.state.recipe);
};
const init = function () {
  _recipeView.default.addHandlerRender(controlRecipes);
  _recipeView.default.addHandlerUpdateServings(controlServings);
  _searchView.default.addHandlerSearch(controlSearchResult);
  _paginationView.default.addHandlerClick(controlPagination);
};
init();